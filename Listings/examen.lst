C51 COMPILER V9.60.0.0   EXAMEN                                                            05/20/2023 23:58:32 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE EXAMEN
OBJECT MODULE PLACED IN .\Objects\examen.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE examen.c OPTIMIZE(8,SPEED) BROWSE NOAREGS DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\examen.lst) TABS(2) OBJECT(.\Objects\examen.obj)

line level    source

   1          #include <REG552.H>
   2          
   3          #define BaseTiempo                50000
   4          #define FrecOsc                   11.0592
   5          #define DesbordamientosPorSegudo  20
   6          #define Canal_lectura_temperatura 5
   7          
   8          // variables globales
   9          unsigned char TL_0, TH_0;
  10          unsigned char contadorLlenado, contadorTemperatura;
  11          bit primerLlenado;
  12          unsigned int codigoTemperatura;
  13          float temperatura;
  14          bit mantenimientoOut;
  15          
  16          // entradas
  17          sbit marcha              = 0x90; // P1.0
  18          sbit S1                  = 0x91; // P1.1
  19          sbit S2                  = 0x92; // P1.2
  20          sbit control_temperatura = 0x97; // P1.7
  21          sbit mantenimiento       = 0xB2; // interrupcion externa 0 logica negada un cero lo trataremos como un uno
  22          
  23          // salidas
  24          sbit LED_M                  = 0xC0; // 4.0
  25          sbit ValvulaVaciado         = 0xC1; // 4.1
  26          sbit BombaHidraulica        = 0xC2; // P4.2
  27          sbit LED_T                  = 0xC7; // P4.7
  28          sbit resistenciaCalentadora = 0xC6; // P4.6
  29          
  30          void inicializar(void);
  31          unsigned int conversionAD(unsigned char canal);
  32          
  33          //FUNCION MAIN
  34          void main(void)
  35          {
  36   1          //Inicializa los valores iniciales
  37   1          inicializar();
  38   1      
  39   1          //Bucle principal
  40   1          while (1) {
  41   2      
  42   2              // Mientras marcha a off o se acaba de salir de un mantenimiento
  43   2              while ((marcha == 0) || (mantenimientoOut == 1)) {
  44   3                  // Variables y salidas valores iniciales
  45   3                  TR0                 = 0;
  46   3                  contadorLlenado     = 0;
  47   3                  contadorTemperatura = 0;
  48   3                  BombaHidraulica     = 0;
  49   3                  ValvulaVaciado      = 0;
  50   3                  // Carga valores iniciales TR0
  51   3                  TL0 = TL_0;
  52   3                  TH0 = TH_0;
  53   3                  // Bit de control de primer llenado 0 (no se ha realizado) 1 (ya se ha llenado el tanque una v
             -ez)
C51 COMPILER V9.60.0.0   EXAMEN                                                            05/20/2023 23:58:32 PAGE 2   

  54   3                  primerLlenado = 0;
  55   3                  // Si acabamos de hacer un manteniemiento ponemos a cero el bit de registro de entrada al modo
             - mantenimiento
  56   3                  if (mantenimientoOut == 1) { mantenimientoOut = 0; }
  57   3              }
  58   2      
  59   2              /* Mientras marcha on y el bit de mantenimeinto a cero(solo pasando por la racerga 
  60   2              de valores iniciales se puede resetear este bit)*/
  61   2              while ((marcha == 1) && (!mantenimientoOut)) {
  62   3      
  63   3                  // Encendemos el led
  64   3                  LED_M = 1;
  65   3      
  66   3                  /* Si la bomba hidraulica esta encendida estamos en un ciclo de llenado y el control de temper
             -atura tiene que estar apagado
  67   3                  O si esta la bomba apagada y el control de temperatura apagado reinicia el control de temperat
             -ura y para el TR0  */
  68   3                  if ((BombaHidraulica)) {
  69   4                      LED_T                  = 0;
  70   4                      contadorTemperatura    = 0;
  71   4                      resistenciaCalentadora = 0;
  72   4                  }
  73   3      
  74   3                  if (!BombaHidraulica && !control_temperatura) {
  75   4                      TR0                    = 0;
  76   4                      LED_T                  = 0;
  77   4                      contadorTemperatura    = 0;
  78   4                      resistenciaCalentadora = 0;
  79   4                      TL0                    = TL_0;
  80   4                      TH0                    = TH_0;
  81   4                  }
  82   3      
  83   3                  // Si detectamos que es el primer llenado o el S1 se desactiva ponemos el proceso en marcha
  84   3                  if ((primerLlenado == 0) || (S1 == 0)) {
  85   4                      // Encendemos el TR0, la bomba y la valvula cerrada
  86   4                      TR0             = 1;
  87   4                      BombaHidraulica = 1;
  88   4                      ValvulaVaciado  = 0;
  89   4                  }
  90   3      
  91   3                  /* Comprobamos el contador o si S2 esta activado para parar
  92   3                      el cliclo y dejarlo preparada para comenzar de nuevo*/
  93   3                  if ((contadorLlenado == (10 * DesbordamientosPorSegudo)) || (S2 == 1)) {
  94   4                      ValvulaVaciado  = 1;
  95   4                      BombaHidraulica = 0;
  96   4                      // Paramos el TR0 y lo recargamos,a la espera de empezar un nuevo ciclo
  97   4                      TR0             = 0;
  98   4                      TL0             = TL_0;
  99   4                      TH0             = TH_0;
 100   4                      contadorLlenado = 0;
 101   4                      /*Activamos el primer llenado. Esto no cambia hasta que marcha para
 102   4                      y vuelva al reposo. nunca habra un primer llenado mas en el ciclo*/
 103   4                      primerLlenado = 1;
 104   4                  }
 105   3      
 106   3                  /*### CONTROL DE TEMPERATURA ###*/
 107   3      
 108   3                  // Si el control de temperatura esta On y no estamos en proceso de llenado ejecutamos
 109   3                  if ((control_temperatura == 1) && (!BombaHidraulica)) {
 110   4      
 111   4                      // Encendemos el led y TR0
 112   4                      LED_T = 1;
C51 COMPILER V9.60.0.0   EXAMEN                                                            05/20/2023 23:58:32 PAGE 3   

 113   4                      TR0   = 1;
 114   4      
 115   4                      // Si han pasado diez segundos ejecuta la lectura de la temperatura
 116   4                      if (contadorTemperatura == (10 * DesbordamientosPorSegudo)) {
 117   5      
 118   5                          // Reset al contador
 119   5                          contadorTemperatura = 0;
 120   5      
 121   5                          // Lectura de temperatura
 122   5                          codigoTemperatura = conversionAD(Canal_lectura_temperatura);
 123   5                          // calculamos la temperatura
 124   5                          temperatura = (130.0 / 1023) * codigoTemperatura - 30.0;
 125   5                          // Si la temperatura es <= que 30 se enciende la resistancia
 126   5                          if (temperatura <= 30) {
 127   6                              resistenciaCalentadora = 1;
 128   6                          }
 129   5                          // Si la temperatura es > que 30 se apaga la resistancia
 130   5                          if (temperatura > 30) {
 131   6                              resistenciaCalentadora = 0;
 132   6                          }
 133   5                      }
 134   4                  }
 135   3              }
 136   2          }
 137   1      }
 138          
 139          /*##################### FUNCIONES #####################*/
 140          
 141          // INICIALIZAR
 142          void inicializar(void)
 143          {
 144   1          // variables locales
 145   1          unsigned int vi;
 146   1          // configuramos tmod timer 0 16 bits
 147   1          TMOD = 0x01;
 148   1          // Calculamos el valor inicial de del TR0
 149   1          vi = (0xFFFF + 1) - BaseTiempo * FrecOsc / 12.0;
 150   1          // Guardamos los valores iniciales en las variables
 151   1          TL_0 = vi;
 152   1          TH_0 = vi >> 8;
 153   1          // Cargamos lo valores de TR0
 154   1          TL0 = TL_0;
 155   1          TH0 = TH_0;
 156   1          // Habilitamos las interrupciones
 157   1          EA  = 1; // Globales
 158   1          ET0 = 1; // timer 0
 159   1          EX0 = 1; // externa 0 pin3.2
 160   1          IT0 = 0; // externa por nivel
 161   1          // desactivamos los LEDs
 162   1          LED_T = 0;
 163   1          LED_M = 0;
 164   1          // Cerramos la valvula y apagamos la bombahidraulica
 165   1          ValvulaVaciado  = 0;
 166   1          BombaHidraulica = 0;
 167   1          // Ponemos a cero la variable de primer llenado
 168   1          primerLlenado = 0;
 169   1          // Ponemos a cero el control de entrad a mantenimiento
 170   1          mantenimientoOut = 0;
 171   1      }
 172          
 173          // INTERRUPCION TIMER 0
 174          void interrupcionTR0(void) interrupt 1 using 2
C51 COMPILER V9.60.0.0   EXAMEN                                                            05/20/2023 23:58:32 PAGE 4   

 175          {
 176   1      
 177   1          // Recargamos el TR0 al entrar en la interrupcion
 178   1          TL0 = TL_0;
 179   1          TH0 = TH_0;
 180   1      
 181   1          // Si estamos llenando el tanque sumamos al contador de llenado
 182   1          if (BombaHidraulica)
 183   1              contadorLlenado = contadorLlenado + 1; // contador++;
 184   1      
 185   1          // Si tenemos el control de temperatura on y no estamos llenando sumamos al contador de temperatura
 186   1          if ((control_temperatura == 1) && (!BombaHidraulica)) {
 187   2              contadorTemperatura++;
 188   2          }
 189   1      }
 190          
 191          // CONVERSION ANALOGICO DIGITAL
 192          unsigned int conversionAD(unsigned char canal)
 193          {
 194   1      
 195   1          ADCON = ADCON & 0x00;  // Borramos ADCON
 196   1          ADCON = ADCON | canal; // Cargamos el canal
 197   1      
 198   1          ADCON = ADCON | 0x08; // Ininciamos la conversion
 199   1      
 200   1          while ((ADCON & 0x10) == 0) // Esperamos a que este completa la conversion
 201   1              ;
 202   1      
 203   1          ADCON = ADCON & 0xEF; // poneoms a 0 ADCI
 204   1      
 205   1          return (ADCON >> 6 | ADCH << 2); // devolvemos el valor
 206   1      }
 207          
 208          // INTERRUPCION EXTERNA P3.2
 209          void interrupcionMantenimiento(void) interrupt 0 using 3
 210          {
 211   1      
 212   1          // Apagamos todas las salidas
 213   1          BombaHidraulica        = 0;    // apagada
 214   1          ValvulaVaciado         = 0;    // Cerrada
 215   1          LED_M                  = 0;    // off
 216   1          LED_T                  = 0;    // off
 217   1          resistenciaCalentadora = 0;    // off
 218   1          TR0                    = 0;    // off
 219   1          contadorLlenado        = 0;    // reset
 220   1          contadorTemperatura    = 0;    // reset
 221   1          TL0                    = TL_0; // valor inicial
 222   1          TH0                    = TH_0; // valor inicial
 223   1      
 224   1          // Activamos el bit que registra la entrada al modo mantenimiento
 225   1          mantenimientoOut = 1;
 226   1          // Espera a que mantnimiento este a nivel alto para salir de la interrupcion
 227   1          while (!mantenimiento)
 228   1              ;
 229   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    358    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   EXAMEN                                                            05/20/2023 23:58:32 PAGE 5   

   DATA SIZE        =     10    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
