C51 COMPILER V9.60.0.0   EXAMEN                                                            05/15/2023 20:48:06 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE EXAMEN
OBJECT MODULE PLACED IN .\Objects\examen.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE examen.c OPTIMIZE(8,SPEED) BROWSE NOAREGS DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\examen.lst) TABS(2) OBJECT(.\Objects\examen.obj)

line level    source

   1          #include <reg552.h>
   2          
   3          #define BASE_DE_TIEMPO 50000
   4          #define FREQ_OSCI      11.0592
   5          
   6          // Declaracion de funciones
   7          
   8          void inicialicizar(void);
   9          unsigned int conversionAD(unsigned char canal);
  10          
  11          // Variables globales
  12          unsigned char TL_carga, TH_carga;
  13          unsigned char contador; //
  14          
  15          sbit marcha = 0xC0;
  16          
  17          void main(void)
  18          {
  19   1          inicialicizar();
  20   1      
  21   1          while (1) {
  22   2              while (marcha == 0) {
  23   3                  // Paramos el timer
  24   3                  TR0 = 0;
  25   3                  // Apagamos las salidas
  26   3                  P3 = 0xC3;
  27   3                  // Carga de nuevo valores iniciales TR0
  28   3                  TL0 = TL_carga;
  29   3                  TH0 = TH_carga;
  30   3                  //Reseteamos el contador
  31   3                  contador = 0;
  32   3      
  33   3              }
  34   2      
  35   2              if ((marcha == 1) && (TR0 == 0)) {
  36   3                  // Ponemos en marcha el TR0
  37   3                  TR0 = 1;
  38   3              }
  39   2          }
  40   1      }
  41          
  42          // Definicion de funciones
  43          
  44          void inicialicizar(void)
  45          {
  46   1      
  47   1          // Variables locales
  48   1          unsigned int vi_inicial;
  49   1      
  50   1          // Configuramos el TR en modo 01 16bit modo timer T MODO TMOD!!!!
  51   1          TMOD = 0x01;
  52   1      
  53   1          // Calculo del valor inicial de TR0
  54   1          vi_inicial = (0xFFFF - 1) - BASE_DE_TIEMPO * FREQ_OSCI / 12.0;
C51 COMPILER V9.60.0.0   EXAMEN                                                            05/15/2023 20:48:06 PAGE 2   

  55   1      
  56   1          // Carga en TL0 y TH0
  57   1          TL0 = TL_carga = vi_inicial;
  58   1          TH0 = TH_carga = vi_inicial >> 8;
  59   1      
  60   1          // Habilitacion interrupciones
  61   1          EA  = 1;
  62   1          ET0 = 1;
  63   1      
  64   1          // Ponemos P3.2;P3.3;P3.4;P3.5 a 0 para evitar problemas
  65   1          P3 = 0xC3;
  66   1      
  67   1          // Arrancamos el TR0
  68   1          // TR0 = 1;
  69   1      }
  70          
  71          unsigned int conversionAD(unsigned char canal)
  72          {
  73   1          /*OJO!!!! AL SIMULAR LOS VOLTAJES TIENEN QUE SER REALES, LOS PUERTOS ACEPTAN ENTRE 0 Y 5 VOLTIOS
  74   1          SI SE SIMULA SE SIMULAN VOLTAJES ENTRE 0-5 SI SUBES DE 5 VOLTIOS DESBORDAS Y NO FUNCIONA*/
  75   1      
  76   1          // Variable local para devolver el valor
  77   1          unsigned int resultadoConversion; // Mismo tipo de dato que la funcion unsigned int!!!!
  78   1      
  79   1          // Ponemos ADCON al 0
  80   1          ADCON = ADCON & 0x00;
  81   1      
  82   1          // Configuramos ADCON
  83   1          ADCON = ADCON | canal;
  84   1      
  85   1          // Iniciamos la conversion
  86   1          ADCON = ADCON | 0x8;
  87   1      
  88   1          // Esperamos a que la conversion este completada
  89   1      
  90   1          while ((ADCON & (0x10)) == 0)
  91   1              ;
  92   1      
  93   1          // Ponemos ADCI a 0
  94   1          ADCON = ADCON & 0xEF;
  95   1      
  96   1          // Guardamos en resultadoConversion
  97   1      
  98   1          resultadoConversion = (ADCON >> 6) | ADCH << 2;
  99   1      
 100   1          return (resultadoConversion);
 101   1      }
 102          
 103          void interrupcionTR0(void) interrupt 1 using 1
 104          {
 105   1      
 106   1          // Variables locales
 107   1          float referenciaTemperatura, temperatura; //La temperatura es un valor decimal
 108   1          unsigned int codigoDigitalReferenciaTemperatura, codigoDigitalTemperatura; //Mismo dato que la funcion
             - de la que recibe el dato
 109   1          float error; //Resultado de operar con decimales
 110   1          
 111   1          // Carga de nuevo valores iniciales TR0
 112   1          TL0 = TL_carga;
 113   1          TH0 = TH_carga;
 114   1      
 115   1          contador++;
C51 COMPILER V9.60.0.0   EXAMEN                                                            05/15/2023 20:48:06 PAGE 3   

 116   1      
 117   1          if (contador == 200) {
 118   2      
 119   2              // Obtenenmos los valores de la referencia de temperatura y la temperatura
 120   2              codigoDigitalReferenciaTemperatura = conversionAD(0);
 121   2              codigoDigitalTemperatura           = conversionAD(1);
 122   2              //Calcula la temperatura y la referencia de temperatura para restar y hacer el error
 123   2              referenciaTemperatura = (97.5 / 1023) * codigoDigitalReferenciaTemperatura + 25;
 124   2              temperatura           = (97.5 / 1023) * codigoDigitalTemperatura + 25;
 125   2              // Obtenemos el error
 126   2              error = referenciaTemperatura - temperatura;
 127   2      
 128   2              // Segun el signo de error seleccionamos una senal de salida en P3 y ponemos a cero el contador pa
             -ra volver a contar 10 segundos
 129   2              if (error > 0) {
 130   3                  P3 = 0xFF;
 131   3              } else if (error <= 0) {
 132   3                  P3 = 0xC3;
 133   3              }
 134   2              contador = 0;
 135   2          }
 136   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    317    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
