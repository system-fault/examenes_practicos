C51 COMPILER V9.60.0.0   EXAMEN                                                            05/15/2023 22:55:49 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE EXAMEN
OBJECT MODULE PLACED IN .\Objects\examen.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE examen.c OPTIMIZE(8,SPEED) BROWSE NOAREGS DEBUG OBJECTEXTEND PRINT(.\Lis
                    -tings\examen.lst) TABS(2) OBJECT(.\Objects\examen.obj)

line level    source

   1          #include <reg552.h>
   2          
   3          #define BASE_TIEMPO 250
   4          #define FREQ_OSC    11.0592
   5          #define DESB_x_SEG  4000
   6          #define CANAL_LECTURA_TEMPERATURA 3
   7          
   8          // Declaracion de funciones
   9          void inicializar(void);
  10          unsigned int conversionAD(unsigned char);
  11          void controlPanel(void);
  12          
  13          // Variables globales
  14          char verdeIn, ambarIn, rojoIn;
  15          unsigned int contador;
  16          unsigned long int contador10seg;
  17          unsigned char TL_1, TH_1;
  18          
  19          
  20          // Salidas
  21          sbit verde = 0x90; //P1.0
  22          sbit ambar = 0x91; //P1.1
  23          sbit rojo  = 0x92; //P1.2
  24          sbit panel = 0x97; //P1.7
  25          
  26          // Entradas
  27          sbit botoPeaton = 0xC0; //P4.0
  28          
  29          void main(void)
  30          {
  31   1          // Inicializa el semaforo
  32   1          inicializar();
  33   1      
  34   1          while (1) {
  35   2              // SECUENCIA VERDE
  36   2              while (verdeIn == 1) {
  37   3                  // Encendemos el verde
  38   3                  verde = 1;
  39   3                  // Esperamos a que se levante TF1
  40   3                  while (TF1 == 0)
  41   3                      ;
  42   3                  // Bajamos TF1
  43   3                  TF1 = 0;
  44   3                  // incrementamos el contador
  45   3                  contador++;
  46   3                  // Aumentamos el contador del panel
  47   3                  contador10seg++;
  48   3      
  49   3                  //Controlamos el panel
  50   3                  controlPanel();
  51   3      
  52   3                  // Comprueba si se ha pulsado el boton peaton
  53   3                  if (botoPeaton == 1) {
  54   4                      // Cargamos valores para saltar a ambar
C51 COMPILER V9.60.0.0   EXAMEN                                                            05/15/2023 22:55:49 PAGE 2   

  55   4                      contador = 0;
  56   4                      verdeIn  = 0;
  57   4                      ambarIn  = 1;
  58   4                      verde    = 0;
  59   4                      /*Recargamos el TR0 para que la siguiente secuencia se complete,
  60   4                      si el TR0 no este cargado, no se contaran los segundo correctamente*/
  61   4                      TL1 = TL_1;
  62   4                      TH1 = TH_1;
  63   4                  }
  64   3                  // Comprueba si han pasado 10 segundos/ 1seg 4000
  65   3                  if (contador == 40000) {
  66   4                      contador = 0;
  67   4                      verdeIn  = 0;
  68   4                      ambarIn  = 1;
  69   4                      verde    = 0;
  70   4                  }
  71   3              }
  72   2      
  73   2              controlPanel();
  74   2      
  75   2              // SECUENCIA AMBAR
  76   2              while (ambarIn == 1) {
  77   3      
  78   3                  // Encendemos el ambar
  79   3                  ambar = 1;
  80   3                  // Esperamos a que se levante TF1
  81   3                  while (TF1 == 0)
  82   3                      ;
  83   3                  // Bajamos TF1
  84   3                  TF1 = 0;
  85   3                  // incrementamos el contador
  86   3                  contador++;
  87   3                  // Aumentamos el contador del panel
  88   3                  contador10seg++;
  89   3                  
  90   3                  //Controlamos el panel
  91   3                  controlPanel();
  92   3                  
  93   3      
  94   3                  // Comprueba si han pasado 2 segundos/ 1seg 4000
  95   3                  if (contador == 8000) {
  96   4                      contador = 0;
  97   4                      ambarIn  = 0;
  98   4                      rojoIn   = 1;
  99   4                      ambar    = 0;
 100   4                  }
 101   3              }
 102   2      
 103   2              controlPanel();
 104   2      
 105   2              // SECUENCIA ROJO
 106   2              while (rojoIn == 1) {
 107   3      
 108   3                  // Encendemos el ambar
 109   3                  rojo = 1;
 110   3                  // Esperamos a que se levante TF1
 111   3                  while (TF1 == 0)
 112   3                      ;
 113   3                  // Bajamos TF1
 114   3                  TF1 = 0;
 115   3                  // incrementamos el contador
 116   3                  contador++;
C51 COMPILER V9.60.0.0   EXAMEN                                                            05/15/2023 22:55:49 PAGE 3   

 117   3                  // Aumentamos el contador del panel
 118   3                  contador10seg++;
 119   3      
 120   3                  //Controlamos el panel
 121   3                  controlPanel();
 122   3                  
 123   3                  // Compruba si el boton se ha pulsado el boton peaton
 124   3                  if (botoPeaton == 1) {
 125   4                      contador = 0; // anade 7seg
 126   4                      /*Recargamos el TR0 para que la siguiente secuencia se complete,
 127   4                      si el TR0 no este cargado, no se contaran los segundos correctamente*/
 128   4                      TL1 = TL_1;
 129   4                      TH1 = TH_1;
 130   4                  }
 131   3                  // Comprueba si han pasado 7 segundos/ 1seg 4000
 132   3                  if (contador == 28000) {
 133   4                      contador = 0;
 134   4                      rojoIn   = 0;
 135   4                      verdeIn  = 1;
 136   4                      rojo     = 0;
 137   4                  }
 138   3              }
 139   2      
 140   2              controlPanel();
 141   2          }
 142   1      }
 143          
 144          // Definicion de funciones
 145          
 146          void inicializar(void)
 147          {
 148   1          // Variables locales
 149   1          unsigned char vi_carga;
 150   1          // Configuracion del timer 1 modo 2 (10) temporizador 8 bits con auto recarga
 151   1          TMOD = 0x20;
 152   1          // Calculo de carga inicial del timer 1
 153   1          vi_carga = (0xFF + 1) - BASE_TIEMPO * FREQ_OSC / 12.0;
 154   1          TL_1     = vi_carga;
 155   1          TH_1     = vi_carga;
 156   1          // Una vez disparado el timer no hace falta volver a recargarlo
 157   1          TL1 = TL_1;
 158   1          TH1 = TH_1;
 159   1          // Ponemos las salidas a 0
 160   1          verde = 0;
 161   1          ambar = 0;
 162   1          rojo  = 0;
 163   1      
 164   1          // Iniciamos el TR1
 165   1          TR1 = 1;
 166   1      
 167   1          // Seleccionamos verde como primer color
 168   1          verdeIn = 1;
 169   1      
 170   1          // Pnemos a cero el contador
 171   1          contador = 0;
 172   1      
 173   1          // Apagamos el panel
 174   1          panel = 0;
 175   1      }
 176          
 177          unsigned int conversionAD(unsigned char canal)
 178          {
C51 COMPILER V9.60.0.0   EXAMEN                                                            05/15/2023 22:55:49 PAGE 4   

 179   1      
 180   1          // variables locales
 181   1          unsigned int resultado;
 182   1      
 183   1          // Configuramos ADCON
 184   1          ADCON = ADCON & 0x00; // Boramos ADCON
 185   1          ADCON = canal;        // Asignamos el canal
 186   1      
 187   1          // Iniciamos la conversion AD
 188   1          ADCON = ADCON | 0x08;
 189   1      
 190   1          // Esperamos a que la conversion este hecha
 191   1          while ((ADCON & 0x10) == 0)
 192   1              ;
 193   1          // Ponemos ADCI a cero
 194   1          ADCON = ADCON & 0xEF;
 195   1      
 196   1          // Guardamos en la variable el resultado
 197   1          resultado = (ADCON >> 6) | ADCH << 2;
 198   1      
 199   1          return (resultado);
 200   1      }
 201          
 202          void controlPanel(void)
 203          {
 204   1          //Variables locales
 205   1          float temperatura; // La temperatura tomara valores negativos
 206   1          unsigned int resultadoConversion;
 207   1      
 208   1          // Comprobamos si han pasado 10 segundos
 209   1          if (contador10seg >= 40000) {
 210   2              contador10seg       = 0;
 211   2              resultadoConversion = conversionAD(CANAL_LECTURA_TEMPERATURA);
 212   2              temperatura         = ((70.0 / 1023) * resultadoConversion - 20.0);
 213   2              // Modifica el panel
 214   2              if (temperatura < 15) {
 215   3                  panel = 1;
 216   3              }
 217   2              if (temperatura >= 15) {
 218   3                  panel = 0;
 219   3              }
 220   2          }
 221   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    438    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
